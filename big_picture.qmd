---
title: "Big Picture"
description: "A 538/Upshot style article about the data."
toc: true
draft: FALSE
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
runtime: shiny
---

![](images/The_Big_Picture_2.jpeg)

This comes from the file `big_picture.Rmd`.

Think of this page as your 538/Upshot style article. This means that you should try to tell a story through the data and your analysis. Read articles from those sites and similar sites to get a feeling for what they are like. Try to write in the style of a news or popular article. Importantly, this page should be geared towards the general public. You shouldn't assume the reader understands how to interpret a linear regression or a complicated plot. Focus on interpretation and visualizations.



---


### Interactive

You will also be required to make an interactive dashboard like [this one](/flex/flex.html).

Your Big Data page should also include a small interactive dashboard. The dashboard should be created either using Shinylive, as below. This interactive component should in some way support your thesis from your big picture page. Good interactives often provide both high-level understanding of the data while allowing a user to investigate specific scenarios, observations, subgroups, etc.



```{r, echo = FALSE}
#| standalone: true
#| height: 975

library(shiny)
library(shinylive)
library(tidyverse)
options("readr.edition" = 1) # keep this to ensure you can download the data
data <- readRDS(here::here("dataset/cleaned_data_W_revenue_combined.rds"))

# Define UI for app that draws a line graph ----
ui <- fluidPage(
  # App title ----
  titlePanel("The change of income for employees in certain groups throughout recent years"),
  actionButton("show_Race", "Show/Hide Race choice"),
  conditionalPanel(
    condition = "input.show_Race % 2 == 1",  # Shows this panel when button 1 is clicked
    fluidRow(
      selectInput("Race", "Choose the races",
                  unique(data$RACE_GROUP_LABEL),
                  selected = "Total",
                  multiple = TRUE)
    )
  ),
  actionButton("show_Vet", "Show/Hide Veteran choice"),
  conditionalPanel(
    condition = "input.show_Vet % 2 == 1",  # Shows this panel when button 2 is clicked
    fluidRow(
      selectInput("Veteran", "Choose the Veteran Group",
                  unique(data$VET_GROUP_LABEL),
                  selected = "Total"),
    )
  ),
  actionButton("show_Ind", "Show/Hide Industry choice"),
  conditionalPanel(
    condition = "input.show_Ind % 2 == 1",  # Shows this panel when button 2 is clicked
    fluidRow(
      selectInput("Industry", "Choose the Industry Group",
                  unique(data$NAICS2017_LABEL),
                  selected = "Total for all sectors"),
    )
  ),  
  actionButton("show_Sex", "Show/Hide Sex choice"),
  conditionalPanel(
    condition = "input.show_Sex % 2 == 1",  # Shows this panel when button 2 is clicked
    fluidRow(
      selectInput("Sex", "Choose the Sex group",
                  unique(data$SEX_LABEL),
                  selected = "Total"),
    )
  ),  
  actionButton("show_Eth", "Show/Hide Ethnical choice"),
  conditionalPanel(
    condition = "input.show_Eth % 2 == 1",  # Shows this panel when button 2 is clicked
    fluidRow(
      selectInput("Eth", "Choose the Ethnical group",
                  unique(data$ETH_GROUP_LABEL),
                  selected = "Total"),
    )
  ),    
  actionButton("show_Age", "Show/Hide Years in industry choice"),
  conditionalPanel(
    condition = "input.show_Age % 2 == 1",  # Shows this panel when button 2 is clicked
    fluidRow(
      selectInput("Age", "Choose the Years in industry",
                  unique(data$YIBSZFI_LABEL),
                  selected = "Firms with less than 2 years in business",
                  multiple = TRUE),
    )
  ),   
  mainPanel(
    plotOutput(outputId = "distPlot"),
    style = "width: 800px; height: 500px" 
  )
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {
  

  output$distPlot <- renderPlot({
    data |>
      mutate(average_income = PAYANN / EMP * 1000) |>
      filter(VET_GROUP_LABEL %in% input$Veteran,
             NAICS2017_LABEL %in% input$Industry,
             ETH_GROUP_LABEL %in% input$Eth,
             SEX_LABEL %in% input$Sex,
             RACE_GROUP_LABEL %in% input$Race,
             YIBSZFI_LABEL %in% input$Age) |>
      subset(select = c(average_income, YEAR, RACE_GROUP_LABEL, YIBSZFI_LABEL)) |>
      group_by(RACE_GROUP_LABEL) |>
      ggplot() +
      geom_line(aes(x = YEAR, y = average_income, color = RACE_GROUP_LABEL, linetype = YIBSZFI_LABEL)) +
      labs(color = 'Race category', 
           linetype = "Years in business") +
      ylab("Average income / $")

  })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

---

## Rubric: On this page

You will

* Title
  * Your big picture page should have a creative/click-bait-y title/headline that provides a hint about your thesis.
* Clarity of Explanation
  * You should have a clear thesis/goal for this page. What are you trying to show? Make sure that you explain your analysis in detail but don't go into top much mathematics or statistics. The audience for this page is the general public (to the extent possible). Your thesis should be a statement, not a question.
  * Each figure should be very polished and also not too complicated. There should be a clear interpretation of the figure so the figure has a clear purpose. Even something like a histogram can be difficult to interpret for non-experts.
* Creativity
  * Do your best to make things interesting. Think of a story. Think of how each part of your analysis supports the previous part or provides a different perspective.
* Interactive component
  * Quality and ease of use of the interactive components.
Is it clear what can be explored using your interactive components?
Does it enhance and reinforce your conclusions?
* This page should be self-contained.
  
**Note**: This page should have no code visible, i.e. use `#| echo: FALSE`.  




## Rubric: Other components

### Video Recording

Make a video recording (probably using Zoom) demonstrating your interactive components.
You should provide a quick explanation of your data and demonstrate some of the conclusions from your EDA.
This video should be no longer than 4 minutes.
Include a link to your video (and password if needed) in your README.md file on your Github repository. You are not required to provide a link on the website.
This can be presented by any subset of the team members.


### Rest of the Site

Finally, here are important things to keep in mind for the rest of the site. 

The main title of your page is informative.
Each post has an author/description/informative title.
All lab required posts are present.
Each page (including the home page) has a nice featured image associated with it.
Your about page is up to date and clean.
You have removed the generic posts from the initial site template.
